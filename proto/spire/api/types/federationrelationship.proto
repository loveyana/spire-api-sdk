syntax = "proto3";
package spire.api.types;
option go_package = "github.com/spiffe/spire-api-sdk/proto/spire/api/types";

import "spire/api/types/bundle.proto";

message FederationRelationship {
    // Required. The trust domain name (e.g., "example.org") to federate with.
    string trust_domain = 1;

    // Required. URL of the SPIFFE bundle endpoint that provides the trust
    // bundle to federate with. Must use the HTTPS protocol.
    string bundle_endpoint_url = 2;

    // Required. The endpoint profile type.
    oneof bundle_endpoint_profile {
        // Use Web PKI endpoint profile.
        HTTPSWebProfile https_web = 3;

        // Use SPIFFE Authentication endpoint profile.
        HTTPSSPIFFEProfile https_spiffe = 4;
    }

    // Optional. The bundle for the trust domain. This field can be used to
    // create/replace the bundle when the relationship is created or updated.
    // When the relationship is retrieved, it will be set to the latest trust
    // domain bundle (if available). Note, an endpoint with an https_profile
    // that is self-served (i.e. bundle endpoint server presents an SVID from
    // the same trust domain as the bundle returned from the endpoint) requires
    // the bundle from that trust domain to authenticate the connection. This
    // parameter is a convenient way to provide that bundle instead of making a
    // seperate call to the Bundle APIs. If the bundle for the endpoint does
    // not exist, for both self-serving and non self-serving endpoints, the
    // relationship will still be created.
    spire.api.types.Bundle trust_domain_bundle = 5;
}

message HTTPSSPIFFEProfile {
    // Required. Specifies the expected SPIFFE ID of the SPIFFE bundle endpoint
    // server.
    string endpoint_spiffe_id = 1;
}

message HTTPSWebProfile {
}

message FederationRelationshipMask {
    // bundle_endpoint_url field mask.
    bool bundle_endpoint_url = 1;

    // bundle_endpoint_profile field mask.
    bool bundle_endpoint_profile = 2;
}
